pyhon used for : 
 
 Data Analysis
 AI/ML
 Automation
 Web Apps
 Mobile Apps
 Desktop Apps
 Testing
 Hacking

python why :
 
 High Level
 cross-platform
 Huge Community
 Large Ecosystem
 

A Multi-purpose language with a simple , and beginner-friendly language

python --version #Python 2.7.12

logging out put - print()
command line input - raw_input()

Python Indentations ::
Where in other programming languages the indentation in code is for readability only, in Python the indentation is very important.
Python uses indentation to indicate a block of code.

Variables are containers for storing data values.Unlike other programming languages, Python has no command for declaring a variable.

There are three numeric types in Python :
syntx : type()
int    - typeof int is <type 'int'> example : 1 , -1
float - typeof float is <type 'float'> example : 1.1 , 35e3 , 12E4 , -87.7e100
complex - typeof float is <type 'complex'> example : 1j , 1+1j , 1-1j

conversions : float(1) , int(2.8) , complex(1)
You cannot convert complex numbers into another number type.

Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers

Operators are used to perform operations on variables and values.

Python divides the operators in the following groups:

Arithmetic operators :: +,-,*,/,%,**,//
Assignment operators :: =
Comparison operators :: ==,>=,<=
Logical operators :: and ,or ,not
Identity operators :: is , is not
Membership operators :: in , not in
Bitwise operators :: & , | , 


There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

List properties - mutable
A list is a collection which is ordered and changeable. In Python lists are written with square brackets.

append()	Adds an element at the end of the list
clear()	        Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list

Tuple properties - immutable
A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.

count() returns the number of times a specified value occurs in a tuple
index()	Searches the tuple for a specified value and returns the position of where it was found

Set properties 
A set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.
Sets are unordered, so the items will appear in a random order.
Once a set is created, you cannot change its items, but you can add new items.

add()				Adds an element to the set
clear()				Removes all the elements from the set
copy()				Returns a copy of the set
difference()			Returns a set containing the difference between two or more sets
difference_update()		Removes the items in this set that are also included in another, specified set
discard()			Remove the specified item
intersection()			Returns a set, that is the intersection of two other sets
intersection_update()		Removes the items in this set that are not present in other, specified set(s)
isdisjoint()			Returns whether two sets have a intersection or not
issubset()			Returns whether another set contains this set or not
issuperset()			Returns whether this set contains another set or not
pop()				Removes an element from the set
remove()			Removes the specified element
symmetric_difference()		Returns a set with the symmetric differences of two sets
symmetric_difference_update()	inserts the symmetric differences from this set and another
union()				Return a set containing the union of sets
update()			Update the set with the union of this set and others

A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.

clear()	      Removes all the elements from the dictionary
copy()	      Returns a copy of the dictionary
fromkeys()    Returns a dictionary with the specified keys and values
get()	      Returns the value of the specified key
items()	      Returns a list containing the a tuple for each key value pair
keys()	      Returns a list containing the dictionary's keys
pop()	      Removes the element with the specified key
popitem()     Removes the last inserted key-value pair
setdefault()  Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()      Updates the dictionary with the specified key-value pairs
values()      Returns a list of all the values in the dictionary

A lambda function is a small anonymous function.
A lambda function can take any number of arguments, but can only have one expression.
power of lambda is better shown when you use them as an anonymous function inside another function.
Use lambda functions when an anonymous function is required for a short period of time.

Python is an object oriented programming language.
A Class is like an object constructor, or a "blueprint" for creating objects.
All classes have a function called __init__(), which is always executed when the class is being initiated.

Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being
 created:
The __init__() function is called automatically every time the class is being used to create a new object.

inheritance allows us to define a class that inherits all the methods and properties from another class.
Parent class is the class being inherited from, also called base class.
Child class is the class that inherits from another class, also called derived class.
Use the pass keyword when you do not want to add any other properties or methods to the class.

The __init__() function is called automatically every time the class is being used to create a new object.

To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.
The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.

The __next__() method also allows you to do operations, and must return the next item in the sequence.
In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:

The try block lets you test a block of code for errors.
The except block lets you handle the error.
The finally block lets you execute code, regardless of the result of the try- and except blocks.

The key function for working with files in Python is the open() function.
The open() function takes two parameters; filename, and mode.

There are four different methods (modes) for opening a file:

"r" - Read - Default value. Opens a file for reading, error if the file does not exist
"a" - Append - Opens a file for appending, creates the file if it does not exist
"w" - Write - Opens a file for writing, creates the file if it does not exist
"x" - Create - Creates the specified file, returns an error if the file exists
In addition you can specify if the file should be handled as binary or text mode
"t" - Text - Default value. Text mode
"b" - Binary - Binary mode (e.g. images)


